""" Utilities for adding a template emulator for a new IBEX device"""

from system_paths import IOC_ROOT, PERL, PERL_IOC_GENERATOR, EPICS, ARCHITECTURE
from templates.paths import CONFIG_XML, CONFIG_XML_NOT_0
from common_utils import run_command
from file_system_utils import replace_in_file, rmtree, mkdir, copy_file, add_to_makefile_list
from command_line_utils import get_input
from os import path, walk, remove
import logging


def _add_ioc_directory(device_info):
    logging.info("Creating support directory {0}".format(device_info.ioc_path))
    mkdir(device_info.ioc_path())
    return device_info.ioc_path()


def _run_ioc_template_setup(device_info, device_count):
    """
    Runs the EPICS perl scripts associated with IOC creation. Passes in the IBEX type flag to use our own templates
    found in C:\\Instrument\\Apps\\EPICS\\base\\master\\templates

    Args:
        device_info (DeviceInfoGenerator): Name-based information about the device
        device_count (int): How many IOC apps to generate
    Returns:
        ioc_path (Str): Path to the IOC directory
    """
    if device_count > 9:
        raise ValueError("Cannot generate more than 9 IOCs for a single device")

    for i in range(1, device_count+1):
        app_name = device_info.ioc_app_name(i)
        ioc_path = device_info.ioc_path()
        logging.info("Generating IOC {}".format(app_name))
        run_command([PERL, PERL_IOC_GENERATOR, "-a", ARCHITECTURE, "-t", "ioc", app_name], ioc_path)
        run_command([PERL, PERL_IOC_GENERATOR, "-a", ARCHITECTURE, "-i", "-t", "ioc", "-p", app_name, app_name],
                    ioc_path)
        return ioc_path


def _add_ioc_config_xml(device_info, device_count):
    """
    Add the basic config.xml file to the IOC

    Args:
        device_info (DeviceInfoGenerator): Name-based information about the device
        device_count (int): How many IOC apps to generate
    """
    template_config_xml = path.join(device_info.ioc_boot_path(1), "config.xml")
    copy_file(CONFIG_XML, template_config_xml)
    files_changed = [template_config_xml]

    for i in range(2, device_count+1):
        template_config_xml = path.join(device_info.ioc_boot_path(i), "config.xml")
        copy_file(CONFIG_XML_NOT_0, template_config_xml)
        files_changed.append(template_config_xml)
    run_command(["make", "iocstartups"], EPICS)

    return files_changed


def _replace_ioc_macros(device_info, device_count):
    """
    Replace a couple of templates in the st.cmd with generated names

    Args:
        device_info: Name-based information about the device
        device_count: How many IOC apps to update
    """
    for i in range(1, device_count+1):
        files_containing_macros = [
            path.join(device_info.ioc_src_path(i), "Makefile"),
            path.join(device_info.ioc_boot_path(i), "st.cmd"),
            path.join(device_info.ioc_boot_path(i), "st-common.cmd"),
            path.join(device_info.ioc_boot_path(i), "config.xml")]

        for file_containing_macros in files_containing_macros:
            if not path.exists(file_containing_macros):
                AssertionError("Attempting to replace macros before command file has been created")
            replace_in_file(file_containing_macros,
                            [("_SUPPORT_MACRO_", device_info.ioc_name()),
                             ("_DB_NAME_", device_info.ioc_name()),
                             ("_NAME_LOWER_", device_info.support_app_name()),
                             ("_01_APP_NAME_", device_info.ioc_app_name(1))])
        return files_containing_macros


def _clean_up(device_info, device_count):
    """
    Clean up any files generated by Perl that we don't need (including those that are generated for devices 2+)

    Args:
        device_info: device information
        device_count: number of devices
    """

    logging.info("Removing unnecessary files from {}".format(device_info.ioc_path()))
    for root, dirs, files in walk(device_info.ioc_path()):
        for d in dirs:
            if d == "protocol":
                rmtree(path.join(root, d))

    for i in range(2, device_count + 1):
        remove(path.join(device_info.ioc_boot_path(i), "st-common.cmd"))
        remove(path.join(device_info.ioc_src_path(i), "build.mak"))


def _build(ioc_path):
    """
    Build the IOC

    Args:
        ioc_path: Path to the IOC directory
    """
    run_command(["make"], ioc_path)


def _add_ioc_to_makefile(device_info):
    """
    Add the IOC to the main IOC makefile repo

    Args:
        device_info: Name-based device information
    """
    add_to_makefile_list(IOC_ROOT, "IOCDIRS", device_info.ioc_name())
    return path.join(IOC_ROOT, 'Makefile')


def _add_macro_to_release_file(device_info):
    """
    Adds a macro for the support directory to IOC release file

    Args:
        device_info: Name-based device information
    """
    logging.info("Adding macro to MASTER_RELEASE")
    release_file = path.join(device_info.ioc_path(), "configure", "RELEASE")
    with open(release_file, "a") as f:
        f.write("{macro}=$(SUPPORT)/{name}/master\n".format(
            macro=device_info.ioc_name(), name=device_info.support_app_name()))
    return release_file


def create_ioc(device_info, device_count):
    """
    Creates a device IOC in the EPICS IOC submodule

    Args:
        device_info (DeviceInfoGenerator): Provides name-based information about the device
        device_count (int): Number of IOCs to generate
    Returns:
        files_changes (list[Str]): List of unique files that have been changed/created
    """
    while not 1 <= device_count <= 9:
        try:
            device_count = int(get_input("{} IOCs currently requested. The current script requires a number"
                                         " between 1 and 9. Please enter a new value: ".format(device_count)))
        except (ValueError, TypeError) as e:
            logging.warning("That was not a valid input, please try again: {}".format(e))

    files_changed = [_add_ioc_directory(device_info),
                     _run_ioc_template_setup(device_info, device_count),
                     _add_macro_to_release_file(device_info),
                     _add_ioc_to_makefile(device_info)]

    files_changed.extend(_add_ioc_config_xml(device_info, device_count))
    files_changed.extend(_replace_ioc_macros(device_info, device_count))

    _clean_up(device_info, device_count)
    _build(device_info.ioc_path())

    return list(set(files_changed))
